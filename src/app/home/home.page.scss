#container {
  text-align: center;

  position: absolute;
  left: 0;
  right: 0;
  top: 50%;
  transform: translateY(-50%);
}

#container strong {
  font-size: 20px;
  line-height: 26px;
}

#container p {
  font-size: 16px;
  line-height: 22px;

  color: #8c8c8c;

  margin: 0;
}

#container a {
  text-decoration: none;
}
.labelcol{
  color: #fff;
  //font-size: 2em;
  font-size: 40px !important;
}

.blue-square-container {
  text-align: center;
}

.blue-square {
  //background-color: #0074D9;
  width: 400px;
  height: 500px;
  display: inline-block;
}
.my-square {
  //background-color: #0074D9;
  width: 500px;
  height: 500px;
  position:absolute;
  left: 50%;
  top:50%;
  transform: translate(-50%,-50%);
}
.box {
  border-radius: 5px;
  padding: 3em;
  margin-left: 5px;
  margin-right: 5px;
  // Add a flex rule for browsers not supporting the
  // CSS Grid Layout spec
  flex: 1 1 300px;

  h2 {
     font-weight: bold;
 }
}


/*$blue:       #488aff;
$green:      #4DB6AC;
$red:        #f53d3d;
$gray:       #f4f4f4;
$black:      #000000;
*/
$colors: (
  primary:    #488aff,
  secondary:  #32db64,
  danger:     #f53d3d,
  light:      #f4f4f4,
  dark:       #222,
  my-special-color:   #ffcc55,
);
/*$colors: (
  primary:   $blue,
  secondary: $green,
  secondary: $red,
  gray:    $grqy,
  black:    $black,

  my-special-color:   #ffcc55,
);*/

.card-background-page {

  ion-card {
    position: relative;
    text-align: center;
  }

  .card-title {
    position: absolute;
    top: 36%;
    font-size: 2.0em;
    width: 100%;
    font-weight: bold;
    color: #fff;
  }

  .card-subtitle {
    font-size: 1.0em;
    position: absolute;
    top: 52%;
    width: 100%;
    color: #fff;
  }

}
// IF the browser does NOT support the  CSS Grid Layout specification
// We rely on the use of the CSS Flexbox standard instead
.wrapper {
  display: flex;
  flex-wrap: wrap;
}


// IF the browser DOES support the CSS Grid Layout specification
// then the following rules are applied instead
.wrapper {
  display: grid;

  // Define a 10 pixel gap between each grid track
  grid-gap: 10px;

  // Define a rule, that will be repeated for each grid column, where
  // the grid track is set to a minimum width of 300 pixels and a maximum 
  // width of the available space within the grid container (via the fr or 
  // fraction unit)

  // The auto-fill value allows as many grid tracks to be fitted into the
  // width of the grid container as possible
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));

  // Specify the height of the row - minimum value of 50 pixels and a maximum
  // value set to auto
  grid-auto-rows: minmax(150px, auto);

}
// We need to ensure that browsers that fall back to the
// Flexbox rules add a bottom margin of 10 pixels to all 
// direct child elements within the grid container (to 
// emulate the grid gap)
.wrapper > * {
  margin-bottom: 10px;
}


// Use a feature query to determine if the browser supports 
// a specific CSS rule - in this case the display: grid property

// If the rule is supported then we remove the flexbox fallback 
// rule of adding 10 pixels to the bottom margin of each child 
// decendent of the grid container (to emulate the grid gap)
@supports (display: grid) {
  .wrapper > * {
    margin: 0;
  }
}

header,
footer {
   padding: 3em;
   margin-left: 5px;
   margin-right: 5px;
   // Add a flex rule for browsers not supporting the
   // CSS Grid Layout spec
   flex: 0 1 100%;
   // Define the start and end values for the grid column
   grid-column: 1 / -1;
   text-align: center;
   background-color: rgba(175, 186, 202, 1);
}
.red {
	background-color: rgba(220, 83, 81, 1);
}

.green {
	background-color: rgba(187, 225, 123, 1);
}

.blue {
	background-color: rgba(131, 150, 225, 1);
}

.purple {
	background-color: rgba(155, 121, 170, 1);
}

.yellow {
    background-color: rgba(235, 229, 39, 1);
}

.violet {
    background-color: rgba(213, 118, 211, 1);
}

.orange {
	background-color: rgba(213, 151, 46, 1);
}

.turquoise {
	background-color: rgba(105, 203, 217, 1);
}

.card{
  width: 25rem;
}